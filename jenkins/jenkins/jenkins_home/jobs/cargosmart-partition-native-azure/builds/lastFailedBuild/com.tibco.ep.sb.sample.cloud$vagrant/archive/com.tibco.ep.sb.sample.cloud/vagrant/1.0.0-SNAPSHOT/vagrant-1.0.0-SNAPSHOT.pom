    <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- vim: set tabstop=4 softtabstop=0 expandtab shiftwidth=4 smarttab : -->
    <!-- Copyright (c) 2017.  TIBCO Software Inc. -->

    <modelVersion>4.0.0</modelVersion>

    <groupId>com.tibco.ep.sb.sample.cloud</groupId>
    <artifactId>vagrant</artifactId>
    <packaging>jar</packaging>
    <name>Vagrant and Cloud Provisioning Examples</name>
    
    <!-- Global Params -->
    <properties>
        <VAGRANT_LOG>error</VAGRANT_LOG>
        <AFTER_LAUNCH_WAIT>60</AFTER_LAUNCH_WAIT>
    <!-- use config  -->    
        <CONFIG_PROP_FILE>config.properties</CONFIG_PROP_FILE>
    </properties>

    <parent>
        <groupId>com.tibco.ep.sb.example</groupId>
        <artifactId>partitioning</artifactId>
        <version>1.0.0-SNAPSHOT</version>
        <relativePath>..</relativePath>
    </parent>

<!-- START SNIPPET: dependencies  -->
    <dependencies>
        <dependency>
            <groupId>com.tibco.ep.sb.example</groupId>
            <artifactId>partitioning-application</artifactId>
            <version>1.0.0-SNAPSHOT</version>
            <type>ep-application</type>
        </dependency>

        <dependency>
            <groupId>com.tibco.ep.sb.rt</groupId>
            <artifactId>platform_${com.tibco.platform}${com.tibco.arch}</artifactId>
            <type>zip</type>
            <scope>test</scope>
            <version>10.2.1</version>
        </dependency>

        <dependency>
            <groupId>com.tibco.ep.sb.rt</groupId>
            <artifactId>platform_linux${com.tibco.arch}</artifactId>
            <type>zip</type>
            <scope>provided</scope>
	    <version>10.2.1</version>
        </dependency>

    </dependencies>
<!-- END SNIPPET: dependencies  -->

    <!-- Can choose between AWS, Azure or VMware deployment -->
    <profiles>

        <profile>
            <id>aws</id>
            <properties>
                <!-- make any changes below, please edit profiles/aws/config.properties as well -->
                <!--  regular config with auto discovery  -->
                <profile-id>aws</profile-id>
            </properties>
            <build>
                <filters>
                    <!--
                        Ensures that the config.properties file is always loaded from the
                        configuration directory of the active Maven profile.
                    -->
                    <filter>${project.basedir}/src/main/resources/profiles/${profile-id}/${CONFIG_PROP_FILE}</filter>
                </filters>            
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>properties-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>read-project-properties</goal>
                                </goals>
                                <configuration>
                                    <files>
                                        <file>${project.basedir}/src/main/resources/profiles/${project.activeProfiles[0].id}/${CONFIG_PROP_FILE}</file>
                                    </files>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>                
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.8</version>
                        <executions>
                            <execution>
                                <id>get-aws-inventory-script</id>
                                <phase>compile</phase>
                                <configuration>
                                    <target name="get-aws-inventory-script" unless="vagrant.skip.inventory">
                                        <mkdir dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}/${VAGRANT_PROVISIONER}/playbooks/inventory"/>
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}/${VAGRANT_PROVISIONER}/playbooks/inventory"
                                            executable="/usr/bin/curl"
                                            failonerror="true"
                                            searchpath="true">
                                            <arg line="-L https://github.com/ansible/ansible/raw/devel/contrib/inventory/ec2.py -o ec2.py" />
                                        </exec>
                                        <chmod file="${project.build.directory}/staging/${VAGRANT_PROVIDER}/${VAGRANT_PROVISIONER}/playbooks/inventory/ec2.py" perm="755"/>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>install-aws-plugin</id>
                                <phase>compile</phase>
                                <configuration>
                                    <target name="install_aws_plugin" unless="vagrant.skip.plugins">
                                        <exec   
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="vagrant"
                                            failonerror="true"
                                            searchpath="true">
                                            <arg line="plugin install vagrant-${VAGRANT_PROVIDER}" />
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>upload-sb-s3</id>
                                <phase>compile</phase>
                                <configuration>
                                    <target name="upload_sb_s3" unless="vagrant.skip.s3upload">
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}/app"
                                            executable="curl"
                                            failonerror="true"
                                            searchpath="true">
                                            <arg line="-v -X PUT -T ${SB_TARBALL} ${SB_TARBALL_URL} -H 'Content-Type: application/octet-stream'" />
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>create-aws-vms</id>
                                <phase>compile</phase>
                                <configuration>
                                    <target name="create_aws_vms" unless="vagrant.skip.create">
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="vagrant"
                                            failonerror="true"
                                            searchpath="true">
                                            <arg line="up --provider ${VAGRANT_PROVIDER} --no-parallel --provision-with shell" />
                                            <env key="VAGRANT_LOG" value="${VAGRANT_LOG}"/>
                                            <env key="ANSIBLE_VERBOSE" value="${ANSIBLE_VERBOSE}"/>
                                            <env key="AWS_ACCESS_KEY_ID" value="${env.AWS_ACCESS_KEY_ID}"/>
                                            <env key="AWS_SECRET_ACCESS_KEY" value="${env.AWS_SECRET_ACCESS_KEY}"/>
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <!-- update remote hosts files after instance creation-->
                                <id>execute-aws-hostmanager-remote</id>
                                <phase>compile</phase>
                                <configuration>
                                    <target name="execute-aws-hostmanager-remote" unless="vagrant.skip.hostmanager">
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="vagrant"
                                            failonerror="true"
                                            searchpath="true">
                                            <arg line="hostmanager" />
                                            <env key="VAGRANT_LOG" value="${VAGRANT_LOG}"/>
                                            <env key="UPDATEHOSTSREMOTE" value="true"/>
                                            <env key="UPDATEHOSTSLOCAL" value="remote"/>
                                            <env key="ANSIBLE_VERBOSE" value="${ANSIBLE_VERBOSE}"/>
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>provision-sb-aws</id>
                                <phase>pre-integration-test</phase>
                                <configuration>
                                    <target name="provision_sb_aws" unless="vagrant.skip.provision">
                                    <chmod file="${project.build.directory}/staging/${VAGRANT_PROVIDER}/parallel_provision.sh" perm="ugo+rx"/>
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="./parallel_provision.sh"
                                            failonerror="true"
                                            searchpath="true">
                                            <env key="VAGRANT_LOG" value="${VAGRANT_LOG}"/>
                                            <env key="ANSIBLE_VERBOSE" value="${ANSIBLE_VERBOSE}"/>
                                            <env key="AWS_ACCESS_KEY_ID" value="${env.AWS_ACCESS_KEY_ID}"/>
                                            <env key="AWS_SECRET_ACCESS_KEY" value="${env.AWS_SECRET_ACCESS_KEY}"/>
                                            <env key="ANSIBLE_CONFIG" value="${project.build.directory}/staging/${VAGRANT_PROVIDER}/${VAGRANT_PROVISIONER}/ansible.cfg"/>
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>sb-aws-wait</id>
                                <phase>pre-integration-test</phase>
                                <configuration>
                                    <target>
                                        <sleep seconds="${AFTER_LAUNCH_WAIT}" />
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <!-- update local /etc/hosts file for epadmin testing-->
                                <id>execute-aws-hostmanager-local</id>
                                <phase>compile</phase>
                                <configuration>
                                    <target name="execute-aws-hostmanager-local" unless="vagrant.skip.hostmanager">
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="vagrant"
                                            failonerror="true"
                                            searchpath="true">
                                            <arg line="hostmanager" />
                                            <env key="VAGRANT_LOG" value="${VAGRANT_LOG}"/>
                                            <env key="ANSIBLE_VERBOSE" value="${ANSIBLE_VERBOSE}"/>
                                            <env key="UPDATEHOSTSREMOTE" value="false"/>
                                            <env key="UPDATEHOSTSLOCAL" value="true"/>
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>destroy-aws-vms</id>
                                <phase>pre-clean</phase>
                                <configuration>
                                    <target unless="vagrant.skip.destroy" name="destroy_aws_vms">
                                    <chmod file="${project.build.directory}/staging/${VAGRANT_PROVIDER}/vagrant_destroy_vms.sh" perm="ugo+rx"/>
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="./vagrant_destroy_vms.sh"
                                            failonerror="true"
                                            spawn="false"
                                            failifexecutionfails="true">
                                            <env key="ANSIBLE_VERBOSE" value="${ANSIBLE_VERBOSE}"/>
                                            <env key="VAGRANT_LOG" value="${VAGRANT_LOG}"/>
                                            <env key="UPDATEHOSTSLOCAL" value="true"/>
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                    <groupId>co.escapeideas.maven</groupId>
                    <artifactId>ansible-maven-plugin</artifactId>
                    <version>1.3.0</version>
                    <executions>
                        <execution>
                            <id>display_nodes_aws</id>
                            <goals>
                                <goal>playbook</goal>
                            </goals>
                            <phase>post-integration-test</phase>
                            <configuration>
                                <workingDirectory>${project.build.directory}/staging/${VAGRANT_PROVIDER}</workingDirectory>
                                <playbook>${project.build.directory}/staging/${VAGRANT_PROVIDER}/${VAGRANT_PROVISIONER}/playbooks/Display_All_Nodes.yml</playbook>
                                <inventory>${project.build.directory}/staging/${VAGRANT_PROVIDER}/.vagrant/provisioners/ansible/inventory</inventory>
                                <promoteDebugAsInfo>true</promoteDebugAsInfo>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                </plugins>
            </build>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
        </profile>

        <!-- Activate this profile for vmware vsphere deployment -->
        <profile>
            <id>vsphere</id>
            <properties>
                <profile-id>vsphere</profile-id>
                <!-- make any changes below, please edit profiles/vsphere/config.properties as well -->
                <!--  regular config with auto discovery  -->
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>properties-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>read-project-properties</goal>
                                </goals>
                                <configuration>
                                    <files>
                                        <file>${project.basedir}/src/main/resources/profiles/${project.activeProfiles[0].id}/${CONFIG_PROP_FILE}</file>
                                    </files>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>                
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>install-vsphere-plugin</id>
                                <phase>compile</phase>
                                <configuration>
                                    <target name="install_vsphere_plugin" unless="vagrant.skip.plugins">
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="vagrant"
                                            failonerror="true"
                                            searchpath="true">
                                            <arg line="plugin install vagrant-vsphere" />
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>create-vsphere-vms</id>
                                <phase>compile</phase>
                                <configuration>
                                    <target name="create_vsphere_vms" unless="vagrant.skip.create">
                                        <exec 
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="vagrant"
                                            failonerror="true"
                                            searchpath="true">
                                            <arg line="up --provider ${VAGRANT_PROVIDER} --no-parallel --provision-with shell" />
                                            <env key="VAGRANT_LOG" value="${VAGRANT_LOG}"/>
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <!-- update hosts files after instance creation-->
                                <id>execute-vsphere-hostmanager</id>
                                <phase>compile</phase>
                                <configuration>
                                    <target name="execute-vsphere-hostmanager" unless="vagrant.skip.hostmanager">
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="vagrant"
                                            failonerror="true"
                                            searchpath="true">
                                            <arg line="hostmanager" />
                                            <env key="VAGRANT_LOG" value="${VAGRANT_LOG}"/>
                                            <env key="UPDATEHOSTSREMOTE" value="${UPDATEHOSTSREMOTE}"/>
                                            <env key="UPDATEHOSTSLOCAL" value="true"/>
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>provision-sb-vsphere</id>
                                <phase>pre-integration-test</phase>
                                <configuration>
                                    <target name="provision_sb_vsphere" unless="vagrant.skip.provision">
                                    <chmod file="${project.build.directory}/staging/${VAGRANT_PROVIDER}/parallel_provision.sh" perm="ugo+rx"/>
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="./parallel_provision.sh"
                                            failonerror="true"
                                            searchpath="true">
                                            <!-- <env key="VAGRANT_LOG" value="${VAGRANT_LOG}"/> -->
                                            <env key="ANSIBLE_CONFIG" value="${project.build.directory}/staging/${VAGRANT_PROVIDER}/${VAGRANT_PROVISIONER}/ansible.cfg"/>
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>sb-vsphere-wait</id>
                                <phase>pre-integration-test</phase>
                                <configuration>
                                    <target>
                                        <sleep seconds="${AFTER_LAUNCH_WAIT}" />
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>destroy-vsphere-vms</id>
                                <phase>pre-clean</phase>
                                <configuration>
                                    <target unless="vagrant.skip.destroy" name="destroy_vsphere_vms">
                                    <chmod file="${project.build.directory}/staging/${VAGRANT_PROVIDER}/vagrant_destroy_vms.sh" perm="ugo+rx"/>
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="./vagrant_destroy_vms.sh"
                                            failonerror="true"
                                            spawn="false" 
                                            failifexecutionfails="true">
                                            <env key="VAGRANT_LOG" value="${VAGRANT_LOG}"/>
                                            <env key="UPDATEHOSTSLOCAL" value="true"/>
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>halt-vsphere-vms</id>
                                <configuration>
                                    <target unless="vagrant.skip.halt" name="halt_vsphere_vms">
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="vagrant"
                                            failonerror="true"
                                            spawn="false"
                                            failifexecutionfails="true" 
                                            searchpath="true">
                                            <arg line="halt" />
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
<!--                    <plugin>
                        <groupId>co.escapeideas.maven</groupId>
                        <artifactId>ansible-maven-plugin</artifactId>
                        <version>1.3.0</version>
                        <executions>
                            <execution>
                                <id>display_nodes_vsphere</id>
                                <goals>
                                    <goal>playbook</goal>
                                </goals>
                                <phase>integration-test</phase>
                                <configuration>
                                    <workingDirectory>${project.build.directory}/staging/${VAGRANT_PROVIDER}</workingDirectory>
                                    <playbook>${project.build.directory}/staging/${VAGRANT_PROVIDER}/${VAGRANT_PROVISIONER}/playbooks/Display_All_Nodes.yml</playbook>
                                    <inventory>${project.build.directory}/staging/${VAGRANT_PROVIDER}/.vagrant/provisioners/ansible/inventory</inventory>
                                    <promoteDebugAsInfo>true</promoteDebugAsInfo>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin> -->
                </plugins>
           </build>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
        </profile>

        <!-- Activate this profile for azure deployment -->
        <profile>
            <id>azure</id>
            <properties>
                <profile-id>azure</profile-id>
		<VAGRANT_PROVIDER>azure</VAGRANT_PROVIDER>
                <!-- make any changes below, please edit profiles/azure/config.properties as well -->
                <!--  regular config with auto discovery  -->
            </properties>
            <build>
                <filters>
                    <!--
                        Ensures that the config.properties file is always loaded from the
                        configuration directory of the active Maven profile.
                    -->
                    <filter>${project.basedir}/src/main/resources/profiles/${profile-id}/${CONFIG_PROP_FILE}</filter>
                </filters>            
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>properties-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>read-project-properties</goal>
                                </goals>
                                <configuration>
                                    <files>
                                        <file>${project.basedir}/src/main/resources/profiles/${project.activeProfiles[0].id}/${CONFIG_PROP_FILE}</file>
                                    </files>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>                
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.8</version>
                        <executions>
                            <execution>
                                <id>get-azure-inventory-script</id>
                                <phase>compile</phase>
                                <configuration>
                                    <target name="get-azure-inventory-script" unless="vagrant.skip.inventory">
                                        <mkdir dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}/${VAGRANT_PROVISIONER}/playbooks/inventory"/>
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}/${VAGRANT_PROVISIONER}/playbooks/inventory"
                                            executable="/usr/bin/curl"
                                            failonerror="true"
                                            searchpath="false">
                                            <arg line="-L https://github.com/ansible/ansible/raw/devel/contrib/inventory/azure_rm.py -o azure_rm.py" />
                                        </exec>
                                        <chmod file="${project.build.directory}/staging/${VAGRANT_PROVIDER}/${VAGRANT_PROVISIONER}/playbooks/inventory/azure_rm.py" perm="755"/>
                                    </target>
                                    </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>upload-sb-s3</id>
                                <phase>compile</phase>
                                <configuration>
                                    <target name="upload_sb_s3" unless="vagrant.skip.s3upload">
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}/app"
                                            executable="/usr/bin/curl"
                                            failonerror="true"
                                            searchpath="false">
                                            <arg line="-v -X PUT -T ${SB_TARBALL} ${SB_TARBALL_URL} -H 'Content-Type: application/octet-stream'" />
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>install-azure-plugin</id>
                                <phase>compile</phase>
                                <configuration>
                                    <target name="install_azure_plugin" unless="vagrant.skip.plugins">
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="vagrant"
                                            failonerror="true"
                                            searchpath="true">
                                            <arg line="plugin install vagrant-azure" />
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>create-azure-vms</id>
                                <phase>compile</phase>
                                <configuration>
                                    <target name="create_azure_vms" unless="vagrant.skip.create">
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="vagrant"
                                            failonerror="true"
                                            searchpath="true">
                                            <arg line="up --provider ${VAGRANT_PROVIDER} --no-parallel --provision-with shell" />
                                            <env key="VAGRANT_LOG" value="${VAGRANT_LOG}"/>
                                            # disable rsync on vagrant up and disable requiretty during shell provisioning
                                            <env key="AZURE_CLIENT_ID" value="${AZURE_CLIENT_ID}"/>
                                            <env key="AZURE_SECRET" value="${AZURE_SECRET}"/>
                                            <env key="AZURE_TENANT" value="${AZURE_TENANT}"/>
                                            <env key="AZURE_SUBSCRIPTION_ID" value="${AZURE_SUBSCRIPTION_ID}"/>
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <!-- update remote hosts files after instance creation-->
                                <id>execute-azure-hostmanager-remote</id>
                                <phase>compile</phase>
                                <configuration>
                                    <target name="execute-azure-hostmanager-remote" unless="vagrant.skip.hostmanager">
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="vagrant"
                                            failonerror="true"
                                            searchpath="true">
                                            <arg line="hostmanager" />
                                            <env key="VAGRANT_LOG" value="${VAGRANT_LOG}"/>
                                            <env key="UPDATEHOSTSREMOTE" value="true"/>
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <!-- perform rsync after sudo requiretty disabled from shell provisionging above-->
                                <id>execute-azure-rsync</id>
                                <phase>pre-integration-test</phase>
                                <configuration>
                                    <target name="execute-azure-rsync" unless="vagrant.skip.rsync">
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="vagrant"
                                            failonerror="true"
                                            searchpath="true">
                                            <arg line="rsync" />
                                            <env key="VAGRANT_LOG" value="${VAGRANT_LOG}"/>
                                            <env key="VAGRANT_RSYNC" value="true"/>
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>provision-azure-firewall</id>
                                <phase>compile</phase>
                                <configuration>
                                    <target name="provision_azure_firewall" if="vagrant.azuresg">
                                    <chmod file="${project.build.directory}/staging/${VAGRANT_PROVIDER}/parallel_provision.sh" perm="ugo+rx"/>
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="./parallel_provision.sh"
                                            failonerror="true"
                                            searchpath="true">
                                            <env key="ANSIBLE_TAGS" value="azuresg"/>
                                            <env key="VAGRANT_LOG" value="${VAGRANT_LOG}"/>
                                            <env key="AZURE_CLIENT_ID" value="${env.AZURE_CLIENT_ID}"/>
                                            <env key="AZURE_SECRET" value="${env.AZURE_SECRET}"/>
                                            <env key="AZURE_TENANT" value="${env.AZURE_TENANT}"/>
                                            <env key="AZURE_SUBSCRIPTION_ID" value="${env.AZURE_SUBSCRIPTION_ID}"/>
                                            <env key="ANSIBLE_CONFIG" value="${project.build.directory}/staging/${VAGRANT_PROVIDER}/${VAGRANT_PROVISIONER}/ansible.cfg"/>
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>                            
                            <execution>
                                <id>provision-sb-azure</id>
                                <phase>pre-integration-test</phase>
                                <configuration>
                                    <target name="provision_sb_azure" unless="vagrant.skip.provision">
                                    <chmod file="${project.build.directory}/staging/${VAGRANT_PROVIDER}/parallel_provision.sh" perm="ugo+rx"/>
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="./parallel_provision.sh"
                                            failonerror="true"
                                            searchpath="true">
                                            <env key="VAGRANT_LOG" value="${VAGRANT_LOG}"/>
                                            <env key="AZURE_CLIENT_ID" value="${env.AZURE_CLIENT_ID}"/>
                                            <env key="AZURE_SECRET" value="${env.AZURE_SECRET}"/>
                                            <env key="AZURE_TENANT" value="${env.AZURE_TENANT}"/>
                                            <env key="AZURE_SUBSCRIPTION_ID" value="${env.AZURE_SUBSCRIPTION_ID}"/>
                                            <env key="ANSIBLE_CONFIG" value="${project.build.directory}/staging/${VAGRANT_PROVIDER}/${VAGRANT_PROVISIONER}/ansible.cfg"/>
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>sb-azure-wait</id>
                                <phase>pre-integration-test</phase>
                                <configuration>
                                    <target>
                                        <sleep seconds="${AFTER_LAUNCH_WAIT}" />
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>destroy-azure-vms</id>
                                <phase>pre-clean</phase>
                                <configuration>
                                    <target unless="vagrant.skip.destroy" name="destroy_azure_vms">
                                    <chmod file="${project.build.directory}/staging/${VAGRANT_PROVIDER}/vagrant_destroy_vms.sh" perm="ugo+rx"/>
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="./vagrant_destroy_vms.sh"
                                            failonerror="true"
                                            spawn="false"
                                            failifexecutionfails="true">
                                            <env key="VAGRANT_LOG" value="${VAGRANT_LOG}"/>
                                            <env key="UPDATEHOSTSLOCAL" value="false"/>
                                            <env key="VAGRANT_HOSTMANAGER" value="false"/>
                                            <env key="VAGRANT_LOG" value="${VAGRANT_LOG}"/>
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
           </build>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <!-- Activate this profile for openstack deployment -->
        <profile>
            <id>openstack</id>
            <properties>
                <profile-id>openstack</profile-id>
                <!-- make any changes below, please edit profiles/openstack/config.properties as well -->
                <!--  regular config with auto discovery  -->
            </properties>
            <build>
                <filters>
                    <!--
                        Ensures that the config.properties file is always loaded from the
                        configuration directory of the active Maven profile.
                    -->
                    <filter>${project.basedir}/src/main/resources/profiles/${profile-id}/${CONFIG_PROP_FILE}</filter>
                </filters>            
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>properties-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>read-project-properties</goal>
                                </goals>
                                <configuration>
                                    <files>
                                        <file>${project.basedir}/src/main/resources/profiles/${project.activeProfiles[0].id}/${CONFIG_PROP_FILE}</file>
                                    </files>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>                
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>install-openstack-plugin</id>
                                <phase>compile</phase>
                                <configuration>
                                    <target name="install_openstack_plugin" unless="vagrant.skip.plugins">
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="vagrant"
                                            failonerror="true"
                                            searchpath="true">
                                            <arg line="plugin install vagrant-openstack-provider" />
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>create-openstack-vms</id>
                                <phase>compile</phase>
                                <configuration>
                                    <target name="create_openstack_vms" unless="vagrant.skip.create">
                                        <exec 
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="vagrant"
                                            failonerror="true"
                                            searchpath="true">
                                            <arg line="up --provider ${VAGRANT_PROVIDER} --no-parallel --provision-with shell" />
                                            <env key="VAGRANT_LOG" value="${VAGRANT_LOG}"/>
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <!-- update hosts files after instance creation-->
                                <id>execute-openstack-hostmanager</id>
                                <phase>compile</phase>
                                <configuration>
                                    <target name="execute-openstack-hostmanager" unless="vagrant.skip.hostmanager">
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="vagrant"
                                            failonerror="true"
                                            searchpath="true">
                                            <arg line="hostmanager" />
                                            <env key="VAGRANT_LOG" value="${VAGRANT_LOG}"/>
                                            <env key="UPDATEHOSTSREMOTE" value="${UPDATEHOSTSREMOTE}"/>
                                            <env key="UPDATEHOSTSLOCAL" value="true"/>
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>provision-sb-openstack</id>
                                <phase>pre-integration-test</phase>
                                <configuration>
                                    <target name="provision_sb_openstack" unless="vagrant.skip.provision">
                                    <chmod file="${project.build.directory}/staging/${VAGRANT_PROVIDER}/parallel_provision.sh" perm="ugo+rx"/>
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="./parallel_provision.sh"
                                            failonerror="true"
                                            searchpath="true">
                                            <!-- <env key="VAGRANT_LOG" value="${VAGRANT_LOG}"/> -->
                                            <env key="ANSIBLE_CONFIG" value="${project.build.directory}/staging/${VAGRANT_PROVIDER}/${VAGRANT_PROVISIONER}/ansible.cfg"/>
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>sb-openstack-wait</id>
                                <phase>pre-integration-test</phase>
                                <configuration>
                                    <target>
                                        <sleep seconds="${AFTER_LAUNCH_WAIT}" />
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>destroy-openstack-vms</id>
                                <phase>pre-clean</phase>
                                <configuration>
                                    <target unless="vagrant.skip.destroy" name="destroy_openstack_vms">
                                    <chmod file="${project.build.directory}/staging/${VAGRANT_PROVIDER}/vagrant_destroy_vms.sh" perm="ugo+rx"/>
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="./vagrant_destroy_vms.sh"
                                            failonerror="true"
                                            spawn="false" 
                                            failifexecutionfails="true">
                                            <env key="VAGRANT_LOG" value="${VAGRANT_LOG}"/>
                                            <env key="UPDATEHOSTSLOCAL" value="true"/>
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>halt-openstack-vms</id>
                                <configuration>
                                    <target unless="vagrant.skip.halt" name="halt_openstack_vms">
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="vagrant"
                                            failonerror="true"
                                            spawn="false"
                                            failifexecutionfails="true" 
                                            searchpath="true">
                                            <arg line="halt" />
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
           </build>
        </profile>
        <profile>
            <id>skipTestCompileAndRun</id>
            <activation>
                <property>
                    <name>vagrant.skip</name>
                    <value>true</value>
                </property>
            </activation>
        </profile>        
    </profiles>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-vagrantfile</id>
                        <phase>compile</phase>
                            <goals>
                                <goal>copy-resources</goal>
                            </goals>
                        <configuration>
                            <skip>${vagrant.skip}</skip>
                            <nonFilteredFileExtensions>
                                <nonFilteredFileExtension>box</nonFilteredFileExtension>
                                <nonFilteredFileExtension>gem</nonFilteredFileExtension>
                                <nonFilteredFileExtension>key</nonFilteredFileExtension>
                                <nonFilteredFileExtension>pub</nonFilteredFileExtension>
                                <nonFilteredFileExtension>zip</nonFilteredFileExtension>
                            </nonFilteredFileExtensions>
                            <outputDirectory>${project.build.directory}/staging/${VAGRANT_PROVIDER}</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/resources/${VAGRANT_PROVIDER}</directory>
                                    <filtering>true</filtering>
                                </resource>
                                <resource>
                                    <directory>src/main/resources/scripts</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                            <execution>
                                <id>copy-provisioner-scripts</id>
                                <phase>compile</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <overWriteIfNewer>true</overWriteIfNewer>
                                    <nonFilteredFileExtensions>
                                        <nonFilteredFileExtension>box</nonFilteredFileExtension>
                                        <nonFilteredFileExtension>key</nonFilteredFileExtension>
                                        <nonFilteredFileExtension>pub</nonFilteredFileExtension>
                                        <nonFilteredFileExtension>zip</nonFilteredFileExtension>
                                        <nonFilteredFileExtension>ign</nonFilteredFileExtension>
                                    </nonFilteredFileExtensions>
                                    <outputDirectory>${project.build.directory}/staging/${VAGRANT_PROVIDER}/${VAGRANT_PROVISIONER}</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>../${VAGRANT_PROVISIONER}/src/main</directory>
                                            <filtering>true</filtering>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                            <execution>
                                <id>copy-cloud-inventory-script</id>
                                <phase>compile</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <overWriteIfNewer>true</overWriteIfNewer>
                                    <outputDirectory>${project.build.directory}/staging/${VAGRANT_PROVIDER}/${VAGRANT_PROVISIONER}/playbooks/inventory</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>./src/main/${VAGRANT_PROVIDER}</directory>
                                            <filtering>false</filtering>
                                            <includes>
                                                <include>*.py</include>
                                            </includes>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                            <execution>
                                <id>copy-localhost-inventory</id>
                                <phase>compile</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <overWriteIfNewer>true</overWriteIfNewer>
                                    <outputDirectory>${project.build.directory}/staging/${VAGRANT_PROVIDER}/.vagrant/provisioners/ansible/inventory</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>./src/main/resources/ansible</directory>
                                            <filtering>false</filtering>
                                            <includes>
                                                <include>vagranthost</include>
                                            </includes>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                            <execution>
                                <id>copy-nodeconfig</id>
                                <phase>compile</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <overWriteIfNewer>true</overWriteIfNewer>
                                    <outputDirectory>${project.build.directory}/staging/${VAGRANT_PROVIDER}/app</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/../partitioning-application/src/test/configurations</directory>
                                            <filtering>true</filtering>
                                            <includes>
                                                <include>${NODE_CONFIG}</include>
                                            </includes>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
            </plugin>
            <!-- START SNIPPET: eptest  -->
            <plugin>
                <groupId>com.tibco.ep</groupId>
                <artifactId>ep-maven-plugin</artifactId>
                <extensions>true</extensions>
                <configuration>
                    <!-- skip default tests since we'll do this in execution steps below -->
                    <skipTests>true</skipTests>
                </configuration>
                <executions>
                    <execution>
                        <id>install_sb</id>
                        <phase>validate</phase>
                        <goals><goal>install-product</goal></goals>
                        <configuration>
                            <skip>${skipTests}</skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>display_nodes</id>
                        <phase>integration-test</phase>
                        <goals><goal>administer-nodes</goal></goals>
                        <configuration>
                            <skip>${skipTests}</skip>
                            <command>display</command>
                            <target>node</target>
                            <!-- Run 'vagrant hostmanager prior using hostname instead of ip address -->
                            <hostname>${nodename1}</hostname>
                            <!-- this nodename can be the clustername or the nodename.cluster -->
                            <serviceName>${nodename1}</serviceName>
                            <userName>guest</userName>
                            <password>guest</password>
                            <adminport>5556</adminport>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- END SNIPPET: eptest  -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                            <id>copy-sb-app</id>
                            <phase>compile</phase>
                            <goals>
                                <goal>copy</goal>
                            </goals>
                            <configuration>
                                <skip>${vagrant.skip}</skip>
                                <artifactItems>
                                    <artifactItem>
                                        <groupId>com.tibco.ep.sb.example</groupId>
                                        <artifactId>partitioning-application</artifactId>
                                        <type>ep-application</type>
                                        <version>1.0.0-SNAPSHOT</version>
                                        <destFileName>partitioning-application-1.0.0-SNAPSHOT.zip</destFileName>
                                    </artifactItem>
                                    <artifactItem>
                                        <groupId>com.tibco.ep.sb.rt</groupId>
                                        <artifactId>platform_linux${DOCKER_SB_ARCH}</artifactId>
                                        <type>zip</type>
                                        <destFileName>${SB_TARBALL}</destFileName>
                                    </artifactItem>
                                </artifactItems>                                    
                                <outputDirectory>${project.build.directory}/staging/${VAGRANT_PROVIDER}/app</outputDirectory>
                                <overWriteReleases>false</overWriteReleases>
                                <overWriteSnapshots>false</overWriteSnapshots>
                                <overWriteIfNewer>true</overWriteIfNewer>
                            </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>install-hostmanager-plugin</id>
                                <phase>compile</phase>
                                <configuration>
                                    <target name="install_hostmanager_plugin" unless="vagrant.skip.plugins">
                                        <exec
                                            dir="${project.build.directory}/staging/${VAGRANT_PROVIDER}"
                                            executable="vagrant"
                                            failonerror="true" 
                                            searchpath="true">
                                            <arg line="plugin install vagrant-hostmanager" />
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>                     
                    </plugin>
        </plugins>
    </build>
</project>
